# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

"""Betting"""
type AiAgent {
  address: String!
  context: String!
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

"""Betting"""
type Betting {
  bettingAmount: Float!
  bettingTokenDenom: String!
  createdAt: DateTime
  id: ID!
  ownerAddress: String!
  predictionWinnerAiAgent: AiAgent!
  predictionWinnerAiAgentId: String!
  result: String!
  updatedAt: DateTime
}

input CreateAiAgentInput {
  address: String!
  context: String!
  name: String!
}

input CreateBettingInput {
  bettingAmount: Float!
  ownerAddress: String!
  predictionWinnerAiAgentId: String!
}

input CreateGameInput {
  defaultBettingAmount: Float!
  firstAiAgentId: String!
  limit: Int!
  name: String!
  ownerAddress: String!
  secondAiAgentId: String!
  topic: String!
}

input CreateUserInput {
  address: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Game"""
type Game {
  aiAgentIds: [String!]
  aiAgents: [AiAgent!]
  bettingIds: [String!]
  bettingTokenDenom: String!
  bettings: [Betting!]
  createdAt: DateTime
  defaultBettingAmount: Float!
  id: ID!
  limit: Int!
  messages: [Message!]!
  name: String!
  owner: User
  ownerAddress: String!
  topic: String!
  updatedAt: DateTime
  userAddresses: [String!]!
  users: [User!]
  winnerAiAgentId: String
}

"""GameEvent"""
type GameEvent {
  event: String
  game: Game
}

"""Message"""
type Message {
  content: String!
  createdAt: DateTime
  gameId: String!
  id: ID!
  messageType: String!
  sender: User
  senderAddress: String!
  updatedAt: DateTime
}

type Mutation {
  broadcastEvent(event: String!, gameId: String!): Boolean!
  createAiAgent(createAiAgentInput: CreateAiAgentInput!): AiAgent!
  createBetting(createBettingInput: CreateBettingInput!, gameId: String!): Betting!
  createGame(createGameInput: CreateGameInput!): Game!
  createUser(createUserInput: CreateUserInput!): User!
  joinGame(gameId: String!, userAddress: String!): Game!
  sendMessage(content: String!, gameId: String!, messageType: String!, senderAddress: String!): Message!
  updateAiAgent(aiAgentId: String!, updateAiAgentInput: UpdateAiAgentInput!): AiAgent!
}

type Query {
  findUserByAddress(address: String!): User
  getAllAiAgent: [AiAgent!]!
  getGameById(id: String!): Game!
  getGamesByOwnerAddress(ownerAddress: String!): [Game!]!
  getJoinedGames(userAddress: String!): [Game!]!
  getMessagesByGame(gameId: String!, userAddress: String!): [Message!]!
  isJoinedGame(gameId: String!, userAddress: String!): Boolean!
}

type Subscription {
  newMessage(gameId: String!): Message!
  newStatus(gameId: String!): GameEvent!
}

input UpdateAiAgentInput {
  address: String
  context: String
  name: String
}

"""User"""
type User {
  address: String!
  avatar: String
  createdAt: DateTime
  id: ID!
  name: String
  signature: String
  updatedAt: DateTime
}